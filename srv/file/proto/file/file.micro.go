// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: file.proto

/*
Package com_lzqysoft_bussinessenv_srv_filesys is a generated protocol buffer package.

It is generated from these files:
	file.proto

It has these top-level messages:
	Response
	UploadFileRequest
	DeleteFileRequest
	UpdateFileRequest
*/
package com_lzqysoft_bussinessenv_srv_filesys

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for File service

type FileService interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...client.CallOption) (*Response, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...client.CallOption) (*Response, error)
	UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...client.CallOption) (*Response, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "com.lzqysoft.bussinessenv.srv.file"
	}
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "File.UploadFile", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "File.DeleteFile", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileService) UpdateFile(ctx context.Context, in *UpdateFileRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "File.UpdateFile", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for File service

type FileHandler interface {
	UploadFile(context.Context, *UploadFileRequest, *Response) error
	DeleteFile(context.Context, *DeleteFileRequest, *Response) error
	UpdateFile(context.Context, *UpdateFileRequest, *Response) error
}

func RegisterFileHandler(s server.Server, hdlr FileHandler, opts ...server.HandlerOption) error {
	type file interface {
		UploadFile(ctx context.Context, in *UploadFileRequest, out *Response) error
		DeleteFile(ctx context.Context, in *DeleteFileRequest, out *Response) error
		UpdateFile(ctx context.Context, in *UpdateFileRequest, out *Response) error
	}
	type File struct {
		file
	}
	h := &fileHandler{hdlr}
	return s.Handle(s.NewHandler(&File{h}, opts...))
}

type fileHandler struct {
	FileHandler
}

func (h *fileHandler) UploadFile(ctx context.Context, in *UploadFileRequest, out *Response) error {
	return h.FileHandler.UploadFile(ctx, in, out)
}

func (h *fileHandler) DeleteFile(ctx context.Context, in *DeleteFileRequest, out *Response) error {
	return h.FileHandler.DeleteFile(ctx, in, out)
}

func (h *fileHandler) UpdateFile(ctx context.Context, in *UpdateFileRequest, out *Response) error {
	return h.FileHandler.UpdateFile(ctx, in, out)
}
